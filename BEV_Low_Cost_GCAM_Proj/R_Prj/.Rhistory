install.packages("ggplot2")
install.packages("xlsx")
install.packages("ggmap")
install.packages("XML")
install.packages("dplyr")
install.packages("stringr")
A <- matrix(c(1,3,2,2,8,9), nrow=3)
a <- c(5,8)
A * a
A
a
library(gcamdata)
??gcamdata
version
help(package = "gcamdata")
install.packages("roxygen2")
help(package = "gcamdata")
library(gcamdata)
library(gcamdata)
?driver
help(package = "gcamdata")
library(gcamdata)
?driver
help(package = "gcamdata")
version
??assertthat
install.packages("reshape2")
library(reshape)
library(reshape2)
version
setRepositories
## Made by Jeon ##
1- a
# The GCAM R header file
# Ben Bond-Lamberty August 2011, updated February 2012
# This file should be source'd by any R script involved in the processing of GCAM input data
# It provides various facilities, including logging, file I/O and definition of common settings
# -----------------------------------------------------------------------------
#install.packages("reshape2")
# library(reshape2)
# library(stringr)
# install.packages("reshape2")
# library(reshape2)
## Made by Jeon ##
#Load required libraries
libs <- c( "reshape2", "stringr" )
for( i in libs ) {
if( !require( i, character.only=T ) ) {
cat( "Couldn't load", i, "; trying to download it...\n" )
install.packages( i )
}
library( i, character.only=T )
}
dcast
library(reshape2)
install.packages(reshape2)
install.packages("reshape2")
dcast
install.packages("reshape2")
dcast
library(reshape2)
dcast
install.packages("plyr")
library(reshape2)
library(plyr)
monthly_date_count <- c(31, 28, 31, 30, 31, 30,
31, 31, 30, 31, 30, 31)
31, 31, 30, 31, 30, 31)monthly_date_count
monthly_date_count
monthly_date_count <- c(31, 28, 31, 30, 31, 30,
31, 31, 30, 31, 30, 31)
monthly_hour_count <- monthly_date_count*24
monthly_hour_count_cumul <- c(monthly_hour_count[1])
for ( i in 2:length(monthly_hour_count)) {
monthly_hour_count_cumul[i] <- sum(monthly_hour_count[1:i])
}
monthly_hour_count_cumul
date = 107
monthly_hour_count_cumul
monthly_hour_count_cumul / 24
monthly_date_count <- c(31, 28, 31, 30, 31, 30,
31, 31, 30, 31, 30, 31)
monthly_hour_count <- monthly_date_count*24
monthly_hour_count_cumul <- c(monthly_hour_count[1])
for ( i in 2:length(monthly_hour_count)) {
monthly_hour_count_cumul[i] <- sum(monthly_hour_count[1:i])
}
monthly_date_count_cumul <- monthly_hour_count_cumul / 24
monthly_date_count_cumul
date = 107
which(date > monthly_date_count_cumul)
which(date > monthly_date_count_cumul)[length(which(date > monthly_date_count_cumul))]
monthly_date_count_cumul[month - ``]
monthly_date_count_cumul[month - 1]
month <- which(date > monthly_date_count_cumul)[length(which(date > monthly_date_count_cumul))] + 1
monthly_date_count_cumul[month - 1]
date -  monthly_date_count_cumul[month - 1]
monthly_date_count <- c(31, 28, 31, 30, 31, 30,
31, 31, 30, 31, 30, 31)
monthly_hour_count <- monthly_date_count*24
monthly_hour_count_cumul <- c(monthly_hour_count[1])
for ( i in 2:length(monthly_hour_count)) {
monthly_hour_count_cumul[i] <- sum(monthly_hour_count[1:i])
}
monthly_date_count_cumul <- monthly_hour_count_cumul / 24
cal_date <- function( date ) {
month <- which(date > monthly_date_count_cumul)[length(which(date > monthly_date_count_cumul))] + 1
month_date <- date -  monthly_date_count_cumul[month - 1]
output <- c(month, month_date)
return(output)
}
cal_date(107)
cal_date(113)
cal_date(92)
cal_date(125)
cal_date(135)
cal_date(278)
cal_date(254)
cal_date(145)
cal_date(140)
cal_date(127)
cal_date(96)
cal_date(111)
cal_date(128)
cal_date(119)
cal_date(131)
cal_date(113)
cal_date(138)
cal_date(236)
cal_date(40)
cal_date(6)
cal_date(167)
cal_date(113)
cal_date(233)
install.packages("reshape2")
library(reshape2)
library(reshape2)
install.packages(reshape2)
install.packages("reshape2")
reshape()
reshape2()
library(reshape2)
install.packages("reshape2")
install.packages("reshape2")
install.packages("stringr")
print("Welcome to R studio with Git")
plot(density(rnorm(1000, mu_1, sigma_sq_1)))
mu_1 <- 5
sigma_sq_1 <- 10
mu_2 <- 8
sigma_sq_2 <- 15
rnorm(100, mu_1, sigma_sq_1)
plot(density(rnorm(1000, mu_1, sigma_sq_1)))
plot(density(rnorm(1000, mu_1, sigma_sq_1)))
plot(density(rnorm(1000, mu_1, sigma_sq_1)))
plot(density(rnorm(1000, mu_1, sigma_sq_1)))
plot(density(rnorm(1000, mu_2, sigma_sq_2)))
# A.1: X+Y
mu__sum_X_Y <- mu_1 + mu_2
sigma__sum_X_Y <- sigma_sq_1 + sigma_sq_2
mu__sum_X_Y
sigma__sum_X_Y
mu_1 <- 5
sigmasq_1 <- 10
mu_2 <- 8
sigmasq_2 <- 15
rnorm(100, mu_1, sigmasq_1)
plot(density(rnorm(1000, mu_1, sigmasq_1)))
plot(density(rnorm(1000, mu_2, sigmasq_2)))
# A.1: X+Y
mu__sum_X_Y <- mu_1 + mu_2
sigma__sum_X_Y <- sigmasq_1 + sigmasq_2
sigma__sum_X_Y
mu_1 <- 5
sigmasq_1 <- 10
mu_2 <- 8
sigmasq_2 <- 15
rnorm(100, mu_1, sigmasq_1)
plot(density(rnorm(1000, mu_1, sigmasq_1)))
plot(density(rnorm(1000, mu_2, sigmasq_2)))
# A.1: X+Y
mu__sum_X_Y <- mu_1 + mu_2
sigma__sum_X_Y <- sigmasq_1 + sigmasq_2
plot(density(rnorm(1000, mu__sum_X_Y, sigma__sum_X_Y)))
# A.2: X-Y
mu__diff_X_Y <- mu_1 - mu_2
sigma__diff_X_Y <- sigmasq_1 - sigmasq_2
plot(density(rnorm(1000, mu__sum_X_Y, sigma__sum_X_Y)))
# A.2: X-Y
mu__diff_X_Y <- mu_1 - mu_2
sigma__diff_X_Y <- sigmasq_1 - sigmasq_2
plot(density(rnorm(1000, mu__diff_X_Y, sigma__diff_X_Y)))
mu_1 <- 15
sigmasq_1 <- 5
mu_2 <- 5
sigmasq_2 <- 15
rnorm(100, mu_1, sigmasq_1)
plot(density(rnorm(1000, mu_1, sigmasq_1)))
plot(density(rnorm(1000, mu_2, sigmasq_2)))
# A.1: X+Y
mu__sum_X_Y <- mu_1 + mu_2
sigma__sum_X_Y <- sigmasq_1 + sigmasq_2
plot(density(rnorm(1000, mu__sum_X_Y, sigma__sum_X_Y)))
# A.2: X-Y
mu__diff_X_Y <- mu_1 - mu_2
sigma__diff_X_Y <- sigmasq_1 - sigmasq_2
plot(density(rnorm(1000, mu__diff_X_Y, sigma__diff_X_Y)))
mu__diff_X_Y
sigma__diff_X_Y
source('~/.active-rstudio-document', echo=TRUE)
library(xlsx);
JSH <- data.frame(abc = c(1,2,3))
JSH
View(JSH
)
ggplot(effect_diff_by_tech, aes(x = sector, y = best_effect_minus_all_effect, fill = technology)) +
geom_bar(stat = 'identity', position = 'stack') +
coord_flip() +
abline(h = 0, col = "black", type = 'dash') +
#facet_wrap(~sector) +
theme(
legend.position = c('right'),
legend.text = element_text(size = 20)) +
theme(text = element_text(size = 25),
axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(x = "Scenario",
y = expression('CO'[2]*' Emission by Passenger Car (Mil.tCO '[2]*')'))
source('C:/Users/e/Desktop/JSH/doing/Coal_PV_EV_GCAMkorea/gcam_result_analysis/Emission_All_scenario_by_sector/emission_all_scenaio_by_sector_new.R')
source('C:/Users/e/Desktop/JSH/doing/Coal_PV_EV_GCAMkorea/gcam_result_analysis/Emission_All_scenario_by_sector/emission_all_scenaio_by_sector_new.R')
source('C:/Users/e/Desktop/JSH/doing/Coal_PV_EV_GCAMkorea/gcam_result_analysis/Emission_All_scenario_by_sector/emission_all_scenaio_by_sector_new.R')
source('C:/Users/e/Desktop/JSH/doing/Coal_PV_EV_GCAMkorea/gcam_result_analysis/Emission_All_scenario_by_sector/emission_all_scenaio_by_sector_new.R')
source('C:/Users/e/Desktop/JSH/doing/Coal_PV_EV_GCAMkorea/gcam_result_analysis/Emission_All_scenario_by_sector/emission_all_scenaio_by_sector_new.R')
source('C:/Users/e/Desktop/JSH/doing/Coal_PV_EV_GCAMkorea/gcam_result_analysis/Emission_All_scenario_by_sector/emission_all_scenaio_by_sector_new.R')
source('C:/Users/e/Desktop/JSH/doing/Coal_PV_EV_GCAMkorea/gcam_result_analysis/Emission_All_scenario_by_sector/emission_all_scenaio_by_sector_new.R')
source('C:/Users/e/Desktop/JSH/doing/Coal_PV_EV_GCAMkorea/gcam_result_analysis/Emission_All_scenario_by_sector/emission_all_scenaio_by_sector_new.R')
source('C:/Users/e/Desktop/JSH/doing/Coal_PV_EV_GCAMkorea/gcam_result_analysis/Emission_All_scenario_by_sector/emission_all_scenaio_by_sector_new.R')
source('C:/Users/e/Desktop/JSH/doing/Coal_PV_EV_GCAMkorea/gcam_result_analysis/Emission_All_scenario_by_sector/emission_all_scenaio_by_sector_new.R')
library(readr)
library(tidyr)
library(dplyr)
library(ggplot2)
GCAM_output <- read_csv("GCAM_outputs.csv", skip = 1)
setwd("C:/Users/e/Desktop/BEV_Low_Cost_GCAM_Proj/R_Prj")
GCAM_output <- read_csv("GCAM_outputs.csv", skip = 1)
GCAM_output
wanted_year <- seq(2015, 2050, by = 5)
wanted_year
GCAM_output %>%
select(scenario, region, input, as.character(wanted_year), Units)
GCAM_output %>%
select(scenario, region, input, as.character(wanted_year), Units) %>%
filter(input == 'elect_td_trn') %>%
pivot_longer(cols = as.character(wanted_year),
names_to = "year",
values_to = "value")
GCAM_output %>%
select(scenario, region, input, as.character(wanted_year), Units) %>%
filter(input == 'elect_td_trn') %>%
pivot_longer(cols = as.character(wanted_year),
names_to = "year",
values_to = "value")
GCAM_output %>%
select(scenario, region, input, as.character(wanted_year), Units) %>%
filter(input == 'elect_td_trn') %>%
pivot_longer(cols = as.character(wanted_year),
names_to = "year",
values_to = "value") %>%
mutate( scenario = case_when(
scenario == "Reference,date=2020-24-9T11:39:03+09:00" ~ "Reference",
scenario == "Reference_BEV_Low_Cost,date=2020-24-9T12:21:36+09:00" ~ "BEV_Low_Cost_scenario",
TRUE ~ scenario
))
library(readr)
library(tidyr)
library(dplyr)
library(ggplot2)
GCAM_output <- read_csv("GCAM_outputs.csv", skip = 1)
wanted_year <- seq(2015, 2050, by = 5)
GCAM_output <- GCAM_output %>%
select(scenario, region, input, as.character(wanted_year), Units) %>%
filter(input == 'elect_td_trn') %>%
pivot_longer(cols = as.character(wanted_year),
names_to = "year",
values_to = "value") %>%
mutate( scenario = case_when(
scenario == "Reference,date=2020-24-9T11:39:03+09:00" ~ "Reference",
scenario == "Reference_BEV_Low_Cost,date=2020-24-9T12:21:36+09:00" ~ "BEV_Low_Cost_scenario",
TRUE ~ scenario
)) %>%
mutate(data_type = "GCAM_simulation")
head(GCAM_output)
View(GCAM_output)
## For trimming IEA historical data ##
IEA_data <- read_csv("Electricity final consumption by sector - Korea.csv", skip = 4)
IEA_data
names(IEA_data)[names(IEA_data) == "X1"] <- "year"
head(IEA_data)
IEA_data %>%
select(year, Transport, Units) %>%
rename(value = Transport)
IEA_data %>%
select(year, Transport, Units) %>%
rename(value = Transport) %>%
mutate(scenario = 'Historical_Data',
region = "South Korea",
input = "elect_td_trn",
Units = "EJ",
data_type = "IEA_historical_data"
)
toe_to_EJ <- 0.0000000419
ktoe_to_EJ <- toe_to_EJ * 10^(3)
ktoe_to_EJ
IEA_data %>%
select(year, Transport, Units) %>%
rename(value = Transport) %>%
mutate(scenario = 'Historical_Data',
region = "South Korea",
input = "elect_td_trn",
Units = "EJ",
data_type = "IEA_historical_data"
) %>%
mutate(value = value * ktoe_to_EJ)
head(GCAM_output)
IEA_data <- IEA_data %>%
select(year, Transport, Units) %>%
rename(value = Transport) %>%
mutate(scenario = 'Historical_Data',
region = "South Korea",
input = "elect_td_trn",
Units = "EJ",
data_type = "IEA_historical_data"
) %>%
mutate(value = value * ktoe_to_EJ) %>%
select(scenario, region, input, Units, year, value, data_type)
IEA_data
## Bind GCAM output data and IEA data
GCAM_output %>%
bind_rows(IEA_data)
class(GCAM_output$year)
class(IEA_data$year)
## Bind GCAM output data and IEA data
GCAM_output$year <- as.numeric(GCAM_output$year)
class(GCAM_output$year)
GCAM_output %>%
bind_rows(IEA_data)
data_for_graph <-
GCAM_output %>%
bind_rows(IEA_data)
data_for_graph
View(data_for_graph)
ggplot(data = data_for_graph, aes(x= year, y = value, group = scenario)) +
geom_line(mapping = aes(colour = data_type), size = 1.5) +
geom_point(mapping = aes(shape = scenario, colour = data_type), size = 5) +
scale_x_continuous(breaks = unique(data_for_graph$year)) +
labs(title = "Electricity Consumption in Trn Sector",
x = "Year",
y = "Electricity Consumption (exajoule)") +
theme(text = element_text(size = 25),
legend.position = c(0.1, 0.8))
ggplot(data = data_for_graph, aes(x= year, y = value, group = scenario)) +
geom_line(mapping = aes(colour = data_type), size = 1.5) +
geom_point(mapping = aes(shape = scenario, colour = data_type), size = 5) +
scale_x_continuous(breaks = unique(data_for_graph$year)) +
labs(title = "Electricity Consumption in Trn Sector",
x = "Year",
y = "Electricity Consumption (exajoule)") +
theme(text = element_text(size = 25),
legend.position = c(0.2, 0.8))
ggplot(data = data_for_graph, aes(x= year, y = value, group = scenario)) +
geom_line(mapping = aes(colour = data_type), size = 1.5) +
geom_point(mapping = aes(shape = scenario, colour = data_type), size = 5) +
scale_x_continuous(breaks = unique(data_for_graph$year)) +
labs(title = "Electricity Consumption in Trn Sector",
x = "Year",
y = "Electricity Consumption (exajoule)") +
theme(text = element_text(size = 25),
legend.position = c(0.15, 0.8))
setwd("C:/Users/e/Desktop/BEV_Low_Cost_GCAM_Proj/R_Prj")
source('C:/Users/e/Desktop/BEV_Low_Cost_GCAM_Proj/R_Prj/Line_graph.R', echo=TRUE)
